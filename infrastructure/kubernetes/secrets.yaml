# HUMAN TASKS:
# 1. Generate secure base64-encoded values for all secrets before deployment
# 2. Set up AWS KMS for encryption key management
# 3. Configure RBAC policies for secret access
# 4. Set up automated key rotation every 30 days
# 5. Configure backup encryption using AWS KMS
# 6. Set up monitoring for secret access and changes
# 7. Configure network policies for secret access
# 8. Implement secret versioning and rollback procedures

# Requirement: Data Security (9.2.1) - Secure storage of sensitive configuration data
apiVersion: v1
kind: Secret
metadata:
  name: mongodb-secrets
  namespace: pantrychef
  labels:
    app: pantrychef
    environment: production
    managed-by: terraform
  annotations:
    encryption: AES-256
    key-rotation: "30d"
    backup-encryption: AWS-KMS
type: Opaque
data:
  # Requirement: Data Security - MongoDB credentials with AES-256 encryption
  DB_USER: ${base64_encoded_value}  # MongoDB username
  DB_PASSWORD: ${base64_encoded_value}  # MongoDB password
  DB_REPLICA_SET: ${base64_encoded_value}  # MongoDB replica set name
---
# Requirement: Authentication Security (9.1.1) - JWT secrets and authentication credentials
apiVersion: v1
kind: Secret
metadata:
  name: jwt-secrets
  namespace: pantrychef
  labels:
    app: pantrychef
    environment: production
    managed-by: terraform
  annotations:
    encryption: AES-256
    key-rotation: "30d"
    backup-encryption: AWS-KMS
type: Opaque
data:
  # Requirement: Authentication Security - JWT signing keys and allowed algorithms
  JWT_SECRET: ${base64_encoded_value}  # JWT signing key
  JWT_ALLOWED_ALGORITHMS: ${base64_encoded_value}  # List of allowed JWT signing algorithms
---
# Requirement: Cloud Infrastructure (5.2.2) - AWS service credentials
apiVersion: v1
kind: Secret
metadata:
  name: aws-secrets
  namespace: pantrychef
  labels:
    app: pantrychef
    environment: production
    managed-by: terraform
  annotations:
    encryption: AES-256
    key-rotation: "30d"
    backup-encryption: AWS-KMS
type: Opaque
data:
  # Requirement: Cloud Infrastructure - AWS credentials and region configuration
  AWS_ACCESS_KEY_ID: ${base64_encoded_value}  # AWS access key
  AWS_SECRET_ACCESS_KEY: ${base64_encoded_value}  # AWS secret key
  AWS_REGION: ${base64_encoded_value}  # AWS region for services
---
# Requirement: Data Security - Redis credentials and cluster configuration
apiVersion: v1
kind: Secret
metadata:
  name: redis-secrets
  namespace: pantrychef
  labels:
    app: pantrychef
    environment: production
    managed-by: terraform
  annotations:
    encryption: AES-256
    key-rotation: "30d"
    backup-encryption: AWS-KMS
type: Opaque
data:
  # Requirement: Cache Layer - Redis authentication and cluster configuration
  REDIS_PASSWORD: ${base64_encoded_value}  # Redis authentication password
  REDIS_CLUSTER_MODE: ${base64_encoded_value}  # Redis cluster mode configuration
---
# Requirement: Data Security - RBAC configuration for secret access
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secret-reader
  namespace: pantrychef
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
  resourceNames: ["mongodb-secrets", "jwt-secrets", "aws-secrets", "redis-secrets"]
---
# Requirement: Data Security - Role binding for service accounts
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-reader-binding
  namespace: pantrychef
subjects:
- kind: ServiceAccount
  name: pantrychef-backend
  namespace: pantrychef
roleRef:
  kind: Role
  name: secret-reader
  apiGroup: rbac.authorization.k8s.io