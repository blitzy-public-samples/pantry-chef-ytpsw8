# ==================================================================================================
# HUMAN TASKS - KEYSTORE SETUP AND SECURITY
# ==================================================================================================
# 1. DO NOT use this example keystore for production - it contains placeholder values
# 2. Generate a new keystore with the commands below using secure credentials
# 3. Store the actual keystore file and credentials securely offline
# 4. Never commit the actual release keystore to version control
# 5. Document key recovery procedures in a secure location
# 6. Maintain strict access control to the release keystore
# 7. Back up the keystore securely - losing it prevents app updates
# 8. Update local.properties with actual keystore credentials

# ==================================================================================================
# KEYSTORE GENERATION COMMAND
# ==================================================================================================
# Use the following keytool command to generate the actual production keystore:

keytool -genkey -v \
        -keystore release.keystore \
        -alias RELEASE_KEY_ALIAS \
        -keyalg RSA \
        -keysize 4096 \
        -validity 9125 \
        -sigalg SHA256withRSA \
        -storetype JKS \
        -storepass RELEASE_STORE_PASSWORD \
        -keypass RELEASE_KEY_PASSWORD \
        -dname "CN=PantryChef,O=PantryChef Inc.,C=US"

# ==================================================================================================
# SECURITY SPECIFICATIONS
# ==================================================================================================
# Key Algorithm: RSA
# Key Size: 4096 bits
# Signature Algorithm: SHA256withRSA
# Validity Period: 25 years (9125 days)
# Distinguished Name: CN=PantryChef,O=PantryChef Inc.,C=US
# Keystore Type: JKS (Java KeyStore)
# Keystore Encryption: AES-256
# Key Protection: Password-based encryption with PBKDF2WithHmacSHA256

# ==================================================================================================
# LOCAL.PROPERTIES CONFIGURATION
# ==================================================================================================
# Add the following properties to your local.properties file:

RELEASE_STORE_FILE=../keystore/release.keystore
RELEASE_KEY_ALIAS=RELEASE_KEY_ALIAS
RELEASE_STORE_PASSWORD=RELEASE_STORE_PASSWORD
RELEASE_KEY_PASSWORD=RELEASE_KEY_PASSWORD

# ==================================================================================================
# KEYSTORE VERIFICATION COMMAND
# ==================================================================================================
# Verify the keystore contents using:

keytool -list -v \
        -keystore release.keystore \
        -storepass RELEASE_STORE_PASSWORD

# ==================================================================================================
# SECURITY NOTES
# ==================================================================================================
# 1. Requirements Addressed:
#    - Security Architecture - Production Environment (9.1 Authentication and Authorization)
#    - Production Deployment Security (9.2.1 Encryption Standards)
#
# 2. Security Properties:
#    - RSA 4096-bit key provides strong cryptographic security
#    - SHA256withRSA ensures secure code signing
#    - 25-year validity period covers app lifetime
#    - AES-256 keystore encryption protects private key
#    - Password-based encryption with PBKDF2WithHmacSHA256
#
# 3. Access Control:
#    - Read/Write permissions: RELEASE_MANAGERS only
#    - Usage: PRODUCTION_ONLY
#    - Storage: Secure offline storage with encrypted backup
#
# 4. Integration:
#    - Used by build.gradle for release signing configuration
#    - Required for Google Play Store app publishing
#    - Enables APK signing for production distribution

# ==================================================================================================
# EXAMPLE KEYSTORE - DO NOT USE IN PRODUCTION
# ==================================================================================================
# This is a binary file template. The actual keystore will be generated
# using the keytool command above and will contain the following:
#
# 1. Private Key Entry
#    - RSA 4096-bit private key for code signing
#    - X.509 certificate with app identity
#
# 2. Certificate Chain
#    - Self-signed certificate for app distribution
#    - SHA256withRSA signature algorithm
#
# 3. Metadata
#    - Creation date
#    - Validity period
#    - Key usage restrictions