# Docker Compose configuration for PantryChef backend services
# Requirement: Containerization - Defines container configurations for all backend microservices

# Requirement: Backend Services Architecture - Service definitions for microservices infrastructure
services:
  # Requirement: Backend Services Architecture - Main API service configuration
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: production
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MONGODB_URI=mongodb://mongodb:27017/pantrychef
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - TZ=UTC
      - NODE_OPTIONS=--max-old-space-size=2048
    ports:
      - "3000:3000"
    volumes:
      - ./logs:/app/logs:rw
      - ./uploads:/app/uploads:rw
    depends_on:
      - mongodb
      - redis
      - elasticsearch
      - rabbitmq
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run
    networks:
      - backend_network

  # Requirement: Data Layer Configuration - MongoDB database service
  mongodb:
    image: mongo:5.0
    volumes:
      - mongodb_data:/data/db:rw
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
      - MONGO_INITDB_DATABASE=pantrychef
    restart: unless-stopped
    command: mongod --auth --wiredTigerCacheSizeGB 1
    networks:
      - backend_network

  # Requirement: Data Layer Configuration - Redis cache service
  redis:
    image: redis:6.2-alpine
    volumes:
      - redis_data:/data:rw
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    networks:
      - backend_network

  # Requirement: Data Layer Configuration - Elasticsearch service
  elasticsearch:
    # image: elasticsearch:7.14-alpine
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.25
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data:rw
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
      - cluster.name=pantrychef-cluster
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    restart: unless-stopped
    networks:
      - backend_network

  # Requirement: Data Layer Configuration - RabbitMQ message queue service
  rabbitmq:
    image: rabbitmq:3.9-management-alpine
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq:rw
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    restart: unless-stopped
    networks:
      - backend_network

# Requirement: High Availability - Persistent volume configuration
volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  rabbitmq_data:
    driver: local

# Requirement: Backend Services Architecture - Network configuration
networks:
  backend_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16